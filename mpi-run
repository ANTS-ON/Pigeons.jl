#!/bin/bash

description="Create a PBS script calling mpiexec and submit it using qsub. The job gets a unique execution folder symlinked in results/latest"
example="Example:  ./mpi-run julia -p 2000 -t 00:01:00  julia --project=. test/benchmark_distributed_array.jl"

default_alloc="st-alexbou-1"

A=$default_alloc

# If changing those default, update help message below
p=1
c=1
t=00:30:00
m=8gb

error=false
while getopts "A:p:c:t:m:h" opt; do
  case "$opt" in
    A)  A=$OPTARG
      ;;
    h)  error=true
      ;; 
    p)  p=$OPTARG
      ;;
    c)  c=$OPTARG
      ;;
    t)  t=$OPTARG
      ;;
    m)  m=$OPTARG
      ;;
    *)  error=true
  esac
done

if [[ $# < 1 || $error == true ]]; then
  echo $description
  echo "$0 [-p #processor] [-c #cpus_per_node] [-t time_budget] [-m mem] [-A pbs_allocation] program [program_args...]"
  echo $example
  echo "Defaults: 1 processor, 1 cpu per nodes, 00:30:00 time budget (30 min), 8gb memory, $default_alloc alloc"
  exit 0
fi

shift $(expr $OPTIND - 1 )
command="$@"

date=$(date '+%Y-%m-%d-%H-%M-%S')
rnd=$(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c 8)
unique_name=$date-$rnd
exec_folder=results/all/$unique_name
mkdir -p $exec_folder
exec_info_dir=$exec_folder/executionInfo
mkdir -p $exec_info_dir
pbs_script=$exec_info_dir/pbs-script.sh

cd results
rm -f latest
ln -s all/$unique_name latest
cd ..

pbs_resources="walltime=$t,select=$p:ncpus=$c:mpiprocs=$c:mem=$m"

echo $command > $exec_info_dir/command.txt
echo $pbs_resources > $exec_info_dir/pbs-resources.txt
git rev-parse HEAD > $exec_info_dir/git-commit.txt

cat << EOF > $pbs_script
#!/bin/bash
#PBS -l $pbs_resources
#PBS -A $A
#PBS -N $rnd
#PBS -o $exec_info_dir/stdout.txt
#PBS -e $exec_info_dir/stderr.txt
cd \$PBS_O_WORKDIR
source ./modules.sh
EXEC_DIR=$exec_folder # Launched program can use this environmnent variable to determine where to write output
date +%s > $exec_info_dir/start-time.txt
mpiexec --merge-stderr-to-stdout --output-filename $exec_folder $command
date +%s > $exec_info_dir/end-time.txt
EOF


cat <<EOF
Submitting: $command
    time limit: $t
    # processes: $p
    # cpu per process: $c
    memory: $m
    allocation: $A
EOF

qsub_id=`qsub $pbs_script`
echo $qsub_id > $exec_info_dir/qsub_id.txt

cat << EOF
Submission successful
    job id: $qsub_id
Useful commands:
    To watch: 'mpi-watch'
    To kill: 'qdel $qsub_id'
    General queue status: 'pbsnodes -aSj'
EOF
